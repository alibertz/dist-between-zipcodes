{"version":3,"sources":["components/Display.js","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","id","distance","unit","error","data","require","Input","state","zip1","zip2","handleKeyPress","e","key","setZips","validZip1","find","item","Zipcode","validZip2","length","sendErr","setZipCodes","className","maxLength","value","this","onKeyPress","bind","onChange","event","setState","target","replace","cities","zip1City","zip1State","zip2City","zip2State","onClick","handleUnitChange","type","name","class","Component","App","zip1lat","zip1lon","zip2lat","zip2lon","err","radius","timeOfDay","getTimeOfDay","time","Date","getHours","setZipCodesLatLon","zipObj1","zipObj2","Lat","Long","City","State","calculateDistance","toRad","x","Math","PI","R","latitude1","latitude2","longitude1","dLat","dLon","a","sin","cos","atan2","sqrt","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e8c3359.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Display = (props) => {\r\n    return (\r\n        <div id=\"displayContainer\">\r\n            <h4 id=\"distance\">{props.distance + ' '}{props.distance ? props.unit : ''}</h4>\r\n            <h5 id=\"errorMsg\">{props.error}</h5>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Display;","import React, { Component } from 'react';\r\nconst data = require('../zipcodes.json');\r\n\r\nclass Input extends Component {\r\n\r\n    state={\r\n        zip1: \"\",\r\n        zip2: \"\"\r\n    }\r\n\r\n    // enter key event handler\r\n    handleKeyPress = e => {\r\n        if(e.key === 'Enter') {\r\n            this.setZips();\r\n        }\r\n    }\r\n\r\n    // input validation\r\n    setZips = () => {\r\n\r\n        // these variables evaluate to true if there's a match from input to zipcodes.json\r\n        let validZip1 = data.find(item => item.Zipcode === this.state.zip1);\r\n        let validZip2 = data.find(item => item.Zipcode === this.state.zip2);\r\n\r\n        // first checks if any input boxes are empty\r\n        if(this.state.zip1.length === 0 && this.state.zip2.length > 0) {\r\n            this.props.sendErr(\"Please enter a value for city 1\");\r\n        } else if (this.state.zip1.length > 0 && this.state.zip2.length === 0) {\r\n            this.props.sendErr(\"Please enter a value for city 2\");\r\n        } else if (this.state.zip1.length === 0 && this.state.zip2.length === 0) {\r\n            this.props.sendErr(\"Please enter zip values for both city inputs\");\r\n        } else {\r\n            // if not empty, checks to see if zip code is present in zipcodes.json\r\n            if (validZip1 && !validZip2) {\r\n                this.props.sendErr(\"Input for city #2 is not a valid zip code\");\r\n            } else if (!validZip1 && validZip2) {\r\n                this.props.sendErr(\"Input for city #1 is not a valid zip code\");\r\n            } else if (!validZip1 && !validZip2) {\r\n                this.props.sendErr(\"Both inputs are not real US zip codes\");\r\n            } else {\r\n                // finally, if there are 2 VALID (real zip codes) inputs, it sends zip obj up to App.js\r\n                this.props.setZipCodes(validZip1, validZip2);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"inputContainer\">\r\n                <div id=\"textboxContainer\">\r\n                    <div className=\"tb\">\r\n                        <input maxLength=\"5\" value={this.state.zip1} onKeyPress={this.handleKeyPress.bind(this)} onChange={event => this.setState({zip1: event.target.value.replace(/\\D/,'')})}/>\r\n                        <h5>{this.props.cities.zip1City}{' '+this.props.cities.zip1State}</h5>\r\n                    </div>\r\n                    <div className=\"tb\">\r\n                        <input maxLength=\"5\" value={this.state.zip2} onKeyPress={this.handleKeyPress.bind(this)} onChange={event => this.setState({zip2: event.target.value.replace(/\\D/,'')})}/>\r\n                        <h5>{this.props.cities.zip2City}{' '+this.props.cities.zip2State}</h5>\r\n                    </div>\r\n                    \r\n\r\n                </div>\r\n                <div id=\"unitContainer\">\r\n                      <label>\r\n                        <input onClick={this.props.handleUnitChange} type=\"radio\" name=\"unit\" value=\"km\"/>\r\n                        <span>km</span>\r\n                      </label>\r\n                      <label>\r\n                        <input onClick={this.props.handleUnitChange} type=\"radio\" name=\"unit\" value=\"miles\"/>\r\n                        <span>mi</span>\r\n                      </label>\r\n                </div>\r\n                <div id=\"btnContainer\" >\r\n                    <button onClick={this.setZips}>Find distance <i class=\"fas fa-map-marked-alt\"></i></button>                \r\n                </div>                \r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Input;","import React, { Component } from 'react';\nimport Display from './components/Display';\nimport Input from './components/Input';\nimport './stylesheet.css';\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.getTimeOfDay();\n  }\n\n  state = {\n    distance:\"\",\n    zip1lat: 0,\n    zip1lon: 0,\n    zip2lat: 0,\n    zip2lon: 0,\n    err: \"\",\n    unit: \"miles\",\n    radius: 3963,\n    timeOfDay: \"morning\",\n    cities: {\n      zip1City: \"City 1 Zip\",\n      zip1State: \"\",\n      zip2City: \"City 2 Zip\",\n      zip2State: \"\"      \n    }\n  }\n\n  // time of day function for greeting\n  getTimeOfDay = () => {\n    let d = new Date();\n    var time = d.getHours();\n    if(time<12) {\n      this.setState({timeOfDay: \"morning\"});\n    } else if(time>12&&time<18) {\n      this.setState({timeOfDay:\"afternoon\"});\n    } else if(time>18) {\n      this.setState({timeOfDay:\"evening\"});\n    }\n  }\n\n  // set state to object recieved from Input.js\n  setZipCodesLatLon = (zipObj1, zipObj2) => {\n    this.setState({zip1lat: zipObj1.Lat, \n      zip1lon: zipObj1.Long, \n      zip2lat: zipObj2.Lat, \n      zip2lon: zipObj2.Long,\n      cities: {\n        zip1City: zipObj1.City,\n        zip1State: zipObj1.State,\n        zip2City: zipObj2.City,\n        zip2State: zipObj2.State,        \n      }\n    }, this.calculateDistance);\n  }\n  \n  // sets error message based on what is sent from Input.js\n  sendErr = (err) => {\n    this.setState({err, distance:\"\"});\n  }\n\n  // unit change function km/mi, only works if there is data in state\n  handleUnitChange = e => {\n    if(this.state.zip1lon !== 0) {\n      if (e.target.value === \"miles\") {\n        this.setState({unit: e.target.value, radius: 3963}, this.calculateDistance);\n      } else {\n        this.setState({unit: e.target.value, radius: 6371}, this.calculateDistance);\n      }      \n    } else {\n      return;\n    }\n  }\n\n  // calculate distance secret formula\n  calculateDistance = () => {\n    // 180 / pi to convert to radians constant\n    const toRad = x => x * (Math.PI / 180);\n\n    // radius of earth\n    const R = this.state.radius;\n\n    // converting all lats/lons to radians for Haversine formula\n    let latitude1 = toRad(this.state.zip1lat);\n    let latitude2 = toRad(this.state.zip2lat);\n    let longitude1 = toRad(this.state.zip1lon);\n    let longitude2 = toRad(this.state.zip2lon);\n\n    let dLat = latitude2 - latitude1;\n    let dLon = longitude2 - longitude1;\n\n    // Haversine formula\n    let a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.cos(latitude1) * Math.cos(latitude2) * Math.sin(dLon/2) * Math.sin(dLon/2);\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    let distance = R * c;\n\n    // set distance in state to Haversine formula outcome\n    this.setState({distance: distance.toFixed(2), err:\"\"});\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 id=\"greeting\">Good {this.state.timeOfDay}, Mediazact!</h1>\n        <div className=\"App\">\n\n          <Input \n            sendErr={this.sendErr} \n            setZipCodes={this.setZipCodesLatLon.bind(this)}\n            handleUnitChange={this.handleUnitChange.bind(this)}\n            cities={this.state.cities}\n            />\n\n          <Display \n            distance={this.state.distance} \n            zip1={this.state.zip1} \n            zip2={this.state.zip2} \n            error={this.state.err} \n            unit={this.state.unit} \n\n            />\n\n        </div>        \n      </div>\n    );\n  }\n}\n\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}